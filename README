Vyatta ISO Build Procedures

    This document describes how to build a Vyatta ISO image. The most
    recent version of this document is the top-level README file of
    the "build-iso" source tree.

Prerequisites

    The Vyatta ISO build uses the "live-helper" tool that is available
    in several distributions. However, we recommend that build hosts
    based on either Debian "lenny" or Ubuntu "hardy". The "build-iso"
    source is maintained as a GIT super-module that references several
    submodules that each build one or more self named Debian
    packages. The submodule feature was added to GIT v1.5.2.

Build Host Setup

    
    To set up another build environment (e.g., system or VM), we
    recommend installing Debian "lenny" (i.e. "testing") with either
    business-card or net-install image,

    http://cdimage.debian.org/cdimage/daily-builds/daily/arch-latest/i386/iso-cd/debian-testing-i386-businesscard.iso
    http://cdimage.debian.org/cdimage/daily-builds/daily/arch-latest/i386/iso-cd/debian-testing-i386-netinst.iso

    The respective installation prompts for distribution mirror. To
    include Vyatta's Debian miror, add this to /etc/apt/sources.list,

	deb http://packages.vyatta.com/vyatta/ lenny main
	deb http://packages.vyatta.com/debian-security/ lenny/updates main

    To install the Vyatta repository GPG key,

    $ wget -O vyatta-pubkey.gpg \
	http://packages.vyatta.com/vyatta/vyatta-pubkey.gpg
    $ sudo apt-key add vyatta-pubkey.gpg

    To build an ISO with all pre-built, binary, packages, install
    these tools on the build host,

	automake autoconf bzip2 curl debhelper devscripts dpatch
	fakeroot fakechroot genisoimage >=git-core_1:1.5.2
	sysv-rc-conf live-helper lsb-release rsync sudo squashfs-tools

    Although not necessary, it's convenient to install these packages
    too,

	kernel-package ntpdate openssh-server 

    To build submodules, each package should list all build
    dependencies. However, to save some iteration, install these
    packages,

	bison flex docbook-utils >=gcc_4:4.1 g++ git-buildpackage
	groff gs gs-gpl imagemagick groff libncurses5-dev libpam0g-dev
	libpcap0.8-dev libreadline-dev libsablot0-dev libtool lintian
	linda manpages-dev tetex-bin texi2html texinfo transfig xmlto
	zlib1g-dev libatm1-dev libdb-dev linuxdoc-tools

    If available, the Vyatta source packages will use the "git2cl"
    script to generate GNU style change logs from the respective GIT
    commit log.  To use this script, install the so named package from
    the Vyatta repository.

Fakechroot

    fakechroot_2.6-1.3 is incompatible with this livecd build (it
    actually breaks the patch program). As a work-around, "pin" the
    package's version by adding this to the host /etc/apt/preferences
    file,

	Package: fakechroot
	Pin: version 2.5*
	Pin-Priority: 1001

    Alternatively, avoid fakechroot by completing the ISO build as
    root (i.e. "sudo make", see below).

Getting Source

    The Vyatta ISO builder consists of scripts and config files
    maintained as a GIT super-module named, "build-iso" that
    references several submodules within its "pkgs/" sub-directory. To
    clone the super-module,

    $ git-clone http://git.vyatta.com/build-iso.git [ workdir ]

    To create and checkout a working glendale branch,

    $ cd < build-iso | workdir >
    build-iso$ git branch --track glendale origin/glendale
    build-iso$ git checkout glendale

    To register the submodules in the cloned repository config,

    build-iso$ git-submodule init

    It's most efficient to selectively clone only the submodules
    needing for review or modifcation. The ISO build downloads the
    Vyatta pre-built, binary packages of any non-cloned sub-module. To
    clone specific sub-modules,

    build-iso$ git-submodule update pkgs/sub-module...

    To clone all sub-modules for full verification build,

    build-iso$ git-submodule update

Configuration

    The Vyatta ISO builder has GNU autotool configuration,

    build-iso$ autoreconf -i
    build-iso$ ./configure [ option(s) ... ]

    Options,

    --with-target-dist=DIST	bootstrap DIST instead of host
				`lsb_release -c -s`
    --with-exclude... 		comma separated list of standard packages
				to exclude from ISO
    --without-kernel 		use distro supplied kernel instead of Vyatta
    --without-deb-install 	don't build Debian installer CD

    To see all configure options,

    build-iso$ ./configure --help

Build submodules

    To build binary packages for cloned submodule(s),

    build-iso$ tools/submod-mk { --all | SUBMODULE... }

    To build binary and source packages for submodule(s),

    build-iso$ tools/submod-mk --source { --all | SUBMODULE... }

    To build signed binary and source packages for submodule(s),

    build-iso$ tools/submod-mk --signed-source { --all | SUBMODULE... }

Build ISO(s)

    If you build the ISO as a non-root user, the Vyatta builder
    automatically wraps execution with fakeroot and fakechroot. This
    may have compatibility issues described above. As a work-around,
    build the packages as non-root user, then "sudo" the ISO build
    like so,

    build-iso$ tools/submod-mk --all
    build-iso$ sudo make

    To build with a compatible fakeroot/fakechroot,

    build-iso$ PATH=/sbin:/usr/sbin:$PATH
    build-iso$ make

    Either way, the end results are these livecd and, if so
    configured, debian installer images:

	livecd/binary.iso
	livecd/deb-install.iso

Clean

    The Vyatta ISO builder has these standard automake targets to
    clean files generated ...

	mostlyclean 	during ISO build (excludes package built files)
	clean 		during package builds along with ISO files
	distclean 	by autoreconf and configure plus all of the above

    If the ISO was built with "sudo", you must also clean with "sudo",

    build-iso$ sudo make mostlyclean

    To clean files generated during submodule build,

    build-iso$ tools/submod-clean SUBMODULE...

    To clean files generated during all submodule builds,

    build-iso# tools/submod-clean

    To also clean the submodule build stage(s),

    build-iso# tools/submod-clean -d [ SUBMODULE... ]

    To clean the source tree of submodules to skip subsequent builds,

    build-iso# tools/submod-clean -g [ SUBMODULE... ]

    This retains the local bare git repository for quicker updates.

Changes

    The "git-submodule update" command clones the sub-project
    repository in "pkgs/SUBMODULE" with a detached HEAD (i.e. the
    contents of .../.git/HEAD is SHA key rather than a reference to a
    branch head).

    To make any changes in this project, first create and checkout a
    task branch (i.e. glendale) with,

    build-iso$ cd pkgs/SUBMODULE
    build-iso/pkgs/SUBMODULE$ git branch --track BRANCH origin/BRANCH
    build-iso/pkgs/SUBMODULE$ git checkout BRANCH

    After making, testing, and commiting your changes to your local
    repos, publish them to the shared repos with,

    build-iso/pkgs/SUBMODULE$ git-push suva.vyatta.com:/git/SUBMODULE.git

    Then update and publish the super-module index to include the
    submodule(s) changes,

    build-iso/pkgs/SUBMODULE$ cd ../..
    build-iso$ git-update-index pkgs/SUBMODULE
    build-iso$ git-commit -m 'update sub-module SUBMODULE'
    build-iso$ git-push suva:/git/build-iso.git

Updates

    Update the super-module with,

    build-iso$ git-pull
    or for the paranoid,
    build-iso$ git-fetch origin
    build-iso$ git-whatchanged HEAD..origin/BRANCH
    build-iso$ git-merge origin/BRANCH

    If new submodules were added, include these in the config,

    build-iso$ git-submodule init

    To see which checked-out submodules have upstream modifications,

    build-iso$ git-status		# search for changes in pkgs/

    Get the "from" and "to" SHAs with,

    build-iso$ git-diff pkgs/SUBMODULE

    This will produce output something like,

	diff --git a/pkgs/vyatta-cfg-quagga b/pkgs/vyatta-cfg-quagga
	index 78124a9..fca1739 160000
	--- a/pkgs/vyatta-cfg-quagga
	+++ b/pkgs/vyatta-cfg-quagga
	@@ -1 +1 @@
	-Subproject commit 78124a9754efe0bda1d9c827c593c5e0635fec3c
	+Subproject commit fca1739f1985c2ba8d6316b1882365f5e26245cd

    To review what changed between these SHAs,

    build-iso$ git --git-dir=pkgs/SUBMODULE/.git fetch
    build-iso$ git --git-dir=pkgs/SUBMODULE/.git whatchanged FROM_SHA TO_SHA

    To merge these submodule changes,

    build-iso$ cd pkgs/SUBMODULE
    build-iso/pkgs/SUBMODULE$ git checkout BRANCH
    build-iso/pkgs/SUBMODULE$ git merge origin/BRANCH
    build-iso/pkgs/SUBMODULE$ debuild -i -b -us -uc
    build-iso/pkgs/SUBMODULE$ cd ../..

    The "git-status" for pkgs/SUBMODULE should now be clean. Iterate
    through the other updated submodules, then rebuild the iso.

