#!/bin/bash

export DEBIAN_FRONTEND=noninteractive

if [[ "$PATH" != */sbin* ]] ; then
    export PATH+=:/usr/local/sbin:/usr/sbin:/sbin
fi

toolsdir=`cd $PWD/../tools;pwd`
if [[ "$PATH" != *${toolsdir}* ]] ; then
    export PATH=${toolsdir}:$PATH
fi

if [ -r ./mk.livecd.conf ] ; then
    source ./mk.livecd.conf
else
    echo E: Missing mk.livecd.conf
    exit 1
fi

# process command line variable overrides
for arg ; do
    case "$arg" in
	--*=* )
	    arg=${arg#--}
	    eval ${arg%=*}=\"${arg#*=}\"
	    ;;
	*=* )
	    eval ${arg%=*}=\"${arg#*=}\"
	    ;;
    esac
done

declare -a xdebs debs pkgs depends

: ${TIMESTAMP:=$(date -u +%y%m%d%H%M)}
: ${HUMANTIME:=$(date -u)}
: ${BUILDID:=$(git log -1 --pretty=format:%h)}
: ${CDLABEL:=$TIMESTAMP$BUILDID}
: ${ORGANIZATION:=vyatta.com}
: ${LH_ARCHITECTURE:=`dpkg --print-architecture`}

LH_ISO_VOLUME+=" -- $CDLABEL"

chroot_exclude_pattern='cpp'
chroot_exclude_pattern+='|cpp-*'
chroot_exclude_pattern+='|*-dev'
chroot_exclude_pattern+='|*-doc'
chroot_exclude_pattern+='|dhcp3-*'
chroot_exclude_pattern+='|fakechroot'
chroot_exclude_pattern+='|gcc*'
chroot_exclude_pattern+='|git*'
chroot_exclude_pattern+='|groff*'
chroot_exclude_pattern+='|iproute'
chroot_exclude_pattern+='|linux-headers*'
chroot_exclude_pattern+='|linux-source*'
chroot_exclude_pattern+='|man*'
for (( i=0; i<${#EXCLUDE_PKGS[@]}; i++)) ; do
    chroot_exclude_pattern+=\|${EXCLUDE_PKGS[i]}
done
binary_exclude_pattern=$chroot_exclude_pattern
binary_exclude_pattern+='|squashfs-tools'
binary_exclude_pattern+='|live-initramfs'

shopt -s extglob
shopt -s nullglob

declare -a deb_sources=( deb_sources/${LH_DISTRIBUTION}-*bootstrap* )

set_conf_var ()
{
  local conf=$1
  local var=$2
  local val=$3
  sed -i 's#^\('"$var"'\).*#\1="'"$val"'"#' config/$conf
}

if [ -z "$BUILTBY" ] ; then
    if [ -n "$GIT_COMMITTER_EMAIL" ] ; then
	BUILTBY=$GIT_COMMITTER_EMAIL
    elif [ -n "$GIT_AUTHOR_EMAIL" ] ; then
	BUILTBY=$GIT_AUTHOR_EMAIL
    else
	user_email=`git config user.email`
	if [ -n "$user_email" ] ; then
	    BUILTBY=$user_email
	elif test -n "$SUDO_USER" ; then
	    BUILTBY=$SUDO_USER@$ORGANIZATION
	else
	    BUILTBY=$USER@$ORGANIZATION
	fi
    fi
fi

if [[ $LD_PRELOAD == *libfakeroot-sysv.so* ]]; then
    export LH_USE_FAKEROOT=enabled
fi

echo I: cleaning earlier build
for m in proc-live sysfs-live devpts-live ; do
    if grep -q $m /proc/mounts ; then
	echo I: unmounting $m
	umount $m
    fi
done

echo I: fetching vyatta binary packages
mkdir -p cache/vyatta-deb-mirror

# FIXME! hack around convoluted hollywood repository that is currently
#	 both a debian mirror and vyatta content repos; we only want the
#	 new content and the prior version of squashfs-tools
rsync \
    --archive \
    --delete \
    --filter='+ *vyatta*' \
    --filter='+ squashfs-tools*' \
    --filter='- *' \
    ${VYATTA_POOL}/ \
    cache/vyatta-deb-mirror/ || true

mkdir -p cache/vyatta-dists-mirror/binary-${LH_ARCHITECTURE}
touch cache/vyatta-dists-mirror/binary-${LH_ARCHITECTURE}/Packages
rsync \
    --archive \
    --delete \
    ${VYATTA_POOL/pool/dists}/ \
    cache/vyatta-dists-mirror || true

declare -a pkgs_in_vyatta_deb_mirror=($( \
    printf "%s\n" cache/vyatta-deb-mirror/*.deb | \
    sed -e 's,.*/,,; s,_.*,,' | \
    sort -u ))

declare -a selected_debs_from_vyatta_deb_mirror
for pkg in ${pkgs_in_vyatta_deb_mirror[@]} ; do
    deb=$( sed -n "/^Filename: .*\/${pkg}_/ { s,.*/,,g; s,%3a,:,g; p }" \
	cache/vyatta-dists-mirror/binary-${LH_ARCHITECTURE}/Packages )
    if [ -n "$deb" ] ; then
	selected_debs_from_vyatta_deb_mirror+=( cache/vyatta-deb-mirror/$deb )
    fi
done

cat <<EOF > cache/vyatta-pkgs
snmp
tcpdump
EOF

# create the buildid file
mk_version_package ()
{
    local savedir="$PWD"
    local etcdir="$savedir"/chroot/opt/vyatta/etc
    local config_src=community
    local tmpdir=/tmp/$$-version
    local vf=$tmpdir/opt/vyatta/etc

    VVERSION=`cat version 2>/dev/null`
    case "$VVERSION" in
    [0-9]*)
		config_src=supported
		;;
    "" )
		VVERSION=0.`git-branch|grep '^\*'|sed 's/..//'`
		;;
    esac

    mkdir -p $vf/config

    cp templates/$config_src/config.boot.default $vf/.

    cd $tmpdir
    mkdir DEBIAN

    echo I: generating build record
    cat <<-EOF > $vf/iso-build.txt
	Built by :    $BUILTBY
	Built on :    $HUMANTIME
	Build ID :    $CDLABEL
	EOF

    # backwards compatible symlink
    ln -s iso-build.txt $vf/build.txt
    echo "$CDLABEL">$savedir/iso-label

    echo I: generating package list
    (
	cd "$savedir"
	chroot chroot /opt/vyatta/bin/save-package-report
	mv $etcdir/deb-versions.txt $vf/.
	cd ..
	git-submodule status > $vf/iso-submodules.txt
    )

    echo vyatta-version ${VVERSION} >>$vf/deb-versions.txt

    echo "Version  :    ${VVERSION}">$vf/version
    echo "Copyright:    2006-2008 Vyatta, Inc.">>$vf/version

    (
	echo "Package: vyatta-version"
	echo "Version: ${VVERSION}"
	echo "Architecture: i386"
	echo "Maintainer: Vyatta <debs@vyatta.com>"
	echo "Essential: no"
	echo "Section: base"
	echo "Replaces: vyatta-version, vc-version, vc2-version, devel-version, vyatta-cfg-system"
	echo -n Suggests: 
	<$vf/deb-versions.txt sed -e 's/ *\([^ ]*\)$/(>=\1),/' -e 's/^/ /'
	echo " nano"
	echo Description: "$prefix version file"
	echo " This package sets up the version file and a file containing"
	echo " the list of recommended packages (with the recommended versions)"
    ) >DEBIAN/control

    mkdir ../$$-deb
    dpkg --build . "../$$-deb/vyatta-version_${VVERSION}_all.deb" >/dev/null

    rm -rf $tmpdir
    cd $savedir
    mv /tmp/$$-deb/vyatta-version_${VVERSION}_all.deb chroot/.
    chroot chroot dpkg -i /vyatta-version_${VVERSION}_all.deb
    mv chroot/vyatta-version_${VVERSION}_all.deb config/chroot_local-packages/.
    rm -rf /tmp/$$-deb
}

echo I: configuring build
lh_config
find \
    binary_local-hooks \
    binary_local-includes \
    chroot_local-hooks \
    chroot_local-includes \
    install-gtk_local-includes \
    \! -name \*~ \! -name .\*.swp -print0 | \
    cpio --null --quiet -pdmu config

cat <<EOF > config/chroot_local-includes/iso-build.txt
Built by:    $BUILTBY
Built on:    $HUMANTIME
Build ID:    $CDLABEL
EOF

( cd .. ; git-submodule status ) \
    > config/chroot_local-includes/iso-submodules.txt

  mk_version_package

## NOTE: the 07-apt hook adds this key during live image build, and
## 	binary install respectively
cp config/chroot_local-includes/vyatta-pubkey.gpg config/binary_local-includes/

if [ ${#deb_sources[@]} -gt 0 ]; then
    echo I: set up custom source repos
    cp ${deb_sources[@]} config/chroot_sources/
fi
 
cp cache/vyatta-pkgs config/chroot_local-packageslists/vyatta-pkgs

# clear .stage
# note: this causes all steps to be re-executed. however, the bootstrap stage
# is cached, so the bootstrap step only restores the cached stage.
rm -rf .stage

echo I: building bootstrap
if ! lh_bootstrap; then
  echo E: bootstrap build failed
  exit 1
fi

if [ -d cache/lists ] ; then
    echo I: Restore cached package lists
    ( cd cache && \
	find lists -print0 | \
	cpio --null --quiet -pdmu ../chroot/var/lib/apt )
fi

if eval "$use_xen" ; then
    echo I: Disabling TLS
    mv chroot/lib/tls chroot/lib/tls.disabled
else
    rm -f config/chroot_local-hooks/*xen*
fi

mkdir -p config/binary_local-includes/install/late-commands
( cd config/chroot_local-hooks && \
    find . -print0 | \
    cpio --null --quiet -pdmu ../binary_local-includes/install/late-commands )

# mimic lh_chroot_local-packages but install selected vyatta linux package before
# any other local packages
vyatta_chroot_local-packages ()
{
  declare -a vyatta_linux_debs=( config/chroot_local-packages/linux-*-vyatta*_${LH_ARCHITECTURE}.deb )

  mkdir -p chroot/root/debs
  if [ ${#vyatta_linux_debs[@]} -gt 0 ] ;then
      cp ${vyatta_linux_debs[@]} chroot/root/debs
      chroot chroot dpkg -i -R root/debs
      rm chroot/root/debs/*.deb
  fi

  cp config/chroot_local-packages/!(linux-*vyatta*)_${LH_ARCHITECTURE}.deb \
      chroot/root/debs
  cp config/chroot_local-packages/*_all.deb \
      chroot/root/debs
  chroot chroot dpkg -i -R root/debs || true
  chroot chroot apt-get install -f --yes
  rm chroot/root/debs/*.deb
  rmdir chroot/root/debs
}

# do the steps in lh_chroot
build_chroot ()
{
  echo I: configuring chroot
  lh_chroot_cache restore || return 1
  lh_chroot_proc install || return 1
  lh_chroot_sysfs install || return 1
  lh_chroot_debianchroot install --force || return 1
  lh_chroot_dpkg install || return 1
  lh_chroot_sysv-rc install || return 1
  lh_chroot_hosts install || return 1
  lh_chroot_resolv install || return 1
  lh_chroot_hostname install || return 1
  lh_chroot_apt install || return 1
  echo 'quiet "1";' > chroot/etc/apt/apt.conf.d/03quiet
  lh_chroot_sources install || return 1

  lh_chroot_linux-image install || return 1
  
  test -r live.conf/${LH_DISTRIBUTION} && \
      cp live.conf/${LH_DISTRIBUTION} chroot/etc/live.conf

  echo I: customizing chroot
  lh_chroot_preseed || return 1
  lh_chroot_local-preseed || return 1
  lh_chroot_tasks || return 1
  lh_chroot_packageslists || return 1
  lh_chroot_packages || return 1

  vyatta_chroot_local-packages || return 1
  lh_chroot_local-packageslists || return 1

  lh_chroot_localization || return 1
  lh_chroot_local-includes || return 1
  lh_chroot_sysvinit || return 1
  lh_chroot_hooks || return 1
  lh_chroot_local-hooks || return 1
  lh_chroot_symlinks || return 1
  lh_chroot_hacks || return 1
  lh_chroot_interactive || return 1

  # remove resolv.conf.orig so it doesn't get restored
  rm -f chroot/etc/resolv.conf.orig

  echo I: deconfiguring chroot
  lh_chroot_linux-image remove || return 1
  lh_chroot_sources remove || return 1
  lh_chroot_apt remove || return 1
  lh_chroot_hostname remove || return 1
  lh_chroot_resolv remove || return 1
  lh_chroot_hosts remove || return 1
  lh_chroot_sysv-rc remove || return 1
  lh_chroot_dpkg remove || return 1
  lh_chroot_debianchroot remove || return 1
  lh_chroot_sysfs remove || return 1
  lh_chroot_proc remove || return 1
  lh_chroot_cache save || return 1

  chroot chroot depmod -a `cd chroot/lib/modules;echo *`
}

echo I: building chroot
if ! build_chroot; then
  echo E: chroot build failed
  exit 1
fi

mk_version_package

# remove backup files for ISO
rm -f chroot/etc/*.vyatta-save chroot/etc/*/*.vyatta-save

if [ -f chroot/usr/bin/ldd.REAL ]; then
    echo I: restoring ldd
    rm -f chroot/usr/bin/ldd
    mv chroot/usr/bin/ldd.REAL chroot/usr/bin/ldd 
fi
if [ -f chroot/sbin/ldconfig.REAL ]; then
    echo I: restoring ldd/ldconfig
    rm -f chroot/sbin/ldconfig
    mv chroot/sbin/ldconfig.REAL chroot/sbin/ldconfig
fi

echo I: Cache Package files
( cd chroot/var/lib/apt && \
    find lists -print0 | \
    cpio --null --quiet -pdmu ../../../../cache )

declare -x MKSQUASHFS_OPTIONS="-no-progress -ef tmp/mksquashfs.exclude"
>chroot/tmp/mksquashfs.exclude
for b in chroot/var/lib/apt/lists/*_dists_* ; do
    echo ${b#chroot/}	>> chroot/tmp/mksquashfs.exclude
done
for b in chroot/boot/initrd.img-* ; do
    echo ${b#chroot/}	>> chroot/tmp/mksquashfs.exclude
done

# exclude more files
cat <<EOF >> chroot/tmp/mksquashfs.exclude
etc/apt/preferences
etc/resolv.conf
var/log/bootstrap.log
var/log/dpkg.log
EOF

## restore apt/preferences for binary build
cp chroot_local-includes/etc/apt/preferences chroot/etc/apt

echo I: Copy packages to install pool
rm -f config/binary_local-debs/*.deb
mkdir -p config/binary_depend-debs
for xdeb in cache/packages_linux-image/*.deb ; do
    deb=${xdeb##*/}
    pkg=${deb%%_*}
    if [[ "$pkg" == !($binary_exclude_pattern) ]] ; then
	ln -sf ../../cache/packages_linux-image/$deb \
	    config/binary_local-debs/$deb
    fi
done
for xdeb in cache/packages_local-packages/*.deb ; do
    deb=${xdeb##*/}
    pkg=${deb%%_*}
    if [[ "$pkg" == !($binary_exclude_pattern) ]] ; then
	ln -sf ../../cache/packages_local-packages/$deb \
	    config/binary_local-debs/$deb
    fi
done
for xdeb in cache/packages_local-packageslists/*.deb ; do
    deb=${xdeb##*/}
    pkg=${deb%%_*}
    if [[ "$pkg" == !($binary_exclude_pattern) ]] ; then
	ln -sf ../../cache/packages_local-packageslists/$deb \
	    config/binary_local-debs/$deb
    fi
done
for xdeb in config/chroot_local-packages/*.deb ; do
    deb=${xdeb##*/}
    if [[ "$pkg" == !($binary_exclude_pattern) ]] ; then
	ln -sf ../chroot_local-packages/$deb \
	    config/binary_local-debs/$deb
    fi
done

mkdir -p config/binary_local-includes/install
cp d-i/preseed.cfg config/binary_local-includes/install/preseed.cfg

printf "%s\n" config/binary_local-debs/*.deb | \
    sed -e 's,.*/,,; s,_.*,,' | \
    sort -u > config/binary_local-includes/install/apt-install-list.txt

echo I: building binary
if ! lh_binary ; then
  echo E: binary build failed
  exit 1
fi

echo I: Done

# Local Variables:
# mode: shell-script
# sh-indentation: 4
# End:
