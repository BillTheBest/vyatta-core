#!/bin/bash

export DEBIAN_FRONTEND=noninteractive
toolsdir=`cd $PWD/../tools;pwd`

if [ -r ./mk.livecd.conf ] ; then
    source ./mk.livecd.conf
else
    echo E: Missing mk.livecd.conf
    exit 1
fi

# process command line variable overrides
for arg ; do
    case "$arg" in
	--*=* )
	    arg=${arg#--}
	    eval ${arg%=*}=\"${arg#*=}\"
	    ;;
	*=* )
	    eval ${arg%=*}=\"${arg#*=}\"
	    ;;
    esac
done

declare pkglistdir=config/chroot_local-packageslists

: ${TIMESTAMP:=$(date -u +%y%m%d%H%M)}
: ${HUMANTIME:=$(date -u)}
: ${BUILDID:=$(git log -1 --pretty=format:%h)}
: ${CDLABEL:=$TIMESTAMP$BUILDID}
: ${LIVECD:=livecd/livecd_$CDLABEL.iso}
: ${ORGANIZATION:=vyatta.com}

shopt -s extglob
shopt -s nullglob

if [ -z "$BUILTBY" ] ; then
    if [ -n "$GIT_COMMITTER_EMAIL" ] ; then
	BUILTBY=$GIT_COMMITTER_EMAIL
    elif [ -n "$GIT_AUTHOR_EMAIL" ] ; then
	BUILTBY=$GIT_AUTHOR_EMAIL
    else
	user_email=`git config user.email`
	if [ -n "$user_email" ] ; then
	    BUILTBY=$user_email
	elif test -n "$SUDO_USER" ; then
	    BUILTBY=$SUDO_USER@$ORGANIZATION
	else
	    BUILTBY=$USER@$ORGANIZATION
	fi
    fi
fi

if [[ $LD_PRELOAD == *libfakeroot-sysv.so* ]]; then
    # we are in fakeroot
    LH_OPTIONAL_FAKEROOT="--use-fakeroot enabled"
else
    LH_OPTIONAL_FAKEROOT=
fi

set_conf_var ()
{
  local conf=$1
  local var=$2
  local val=$3
  sed -i "s/^$var=\".*\"/$var=\"$val\"/" config/$conf
}

if [ ! -d config ]; then
  echo I: configuring build
  lh_config ${LH_OPTIONAL_FAKEROOT}

  # set up custom repo(s)
  if ls deb_sources/${LH_DISTRIBUTION}-*bootstrap* >& /dev/null; then
    cp deb_sources/${LH_DISTRIBUTION}-*bootstrap* config/chroot_sources/
  fi
 
  # set up custom pkg list(s)
  echo "# vyatta packages" > ${pkglistdir}/vyatta-pkgs
  cat deb_lists/default-pkglist >> ${pkglistdir}/vyatta-pkgs
  if ls deb_lists/${LH_DISTRIBUTION}-* >& /dev/null; then
    for list in deb_lists/${LH_DISTRIBUTION}-*; do
      cat $list >> ${pkglistdir}/vyatta-pkgs
    done
  fi

  # set up binary hook(s)
  cp hooks_binary/default-hooks config/binary_local-hooks/

  # set up grub template
  cp templates/grub/menu.lst config/binary_grub/

  for x in ${EXCLUDE_PKGS[@]} ; do
      if grep -q "^$x\$" ${pkglistdir}/vyatta-pkgs ; then
	  sed -i "/^$x\$/d" ${pkglistdir}/vyatta-pkgs
      else
	  echo $x- >>${pkglistdir}/vyatta-pkgs
      fi
  done
fi

# create the buildid file
mk_buildid ()
{
    local etcdir=chroot/opt/vyatta/etc

    echo I: generating build record
    [ -d $etcdir ] || mkdir -p -m 0755 $etcdir
    rm -f $etcdir/build.txt $etcdir/iso-build.txt $etc/iso-submodules.txt
    cat <<-EOF > $etcdir/iso-build.txt
	Built by:    $BUILTBY
	Built on:    $HUMANTIME
	Build ID:    $CDLABEL
	EOF
    # backwards compatible symlink
    ln -s iso-build.txt $etcdir/build.txt
    ( cd .. ; git-submodule status ) > $etcdir/iso-submodules.txt
    echo "$CDLABEL">iso-label

    echo I: generating package list
    cp $toolsdir/save-package-report chroot/vyatta-save-package-report
    chroot chroot /bin/sh /vyatta-save-package-report
    rm chroot/vyatta-save-package-report

}

set_up_apt_pref ()
{
  # set vyatta archive priority to 50 so that remote packages are only
  # installed if not already installed locally.
  cat >chroot/etc/apt/preferences <<'EOF'
Package: *
Pin: release l=Vyatta
Pin-Priority: 50

Package: squashfs-tools
Pin: version 1:3.2*
Pin-Priority: 1001
EOF
}

filtered_local_packages ()
{
    for deb ; do
	local xpkg=${deb%%_*}
	local pkg=${xpkg##*/}

        # don't install kernel source/header packages
        if [[ $pkg == linux-* ]] && [[ $pkg != linux-image-* ]]; then
          continue
        fi

	for (( i=0; i<${#EXCLUDE_PKGS[@]}; i++)) ; do
	    [ $pkg == ${EXCLUDE_PKGS[i]} ] && \
		continue 2;
	done
	cp -p $deb config/chroot_local-packages/
    done
}

# set up locally-built packages
rm -f config/chroot_local-packages/*
# FIXME! remove these pre-submodule package directories 
filtered_local_packages ../!(pkgs)/*.deb
filtered_local_packages ../pkgs/*.deb

if [ "$ISO_FAST" == "yes" ]; then
  # do a "fast" build. just install the local packages and then do lh_binary.
  # there may be problems if, for example, dependencies have changed, etc.
  rm -f .stage/chroot_local-packages .stage/binary_*
  
  set_up_apt_pref
  echo I: installing local packages
  lh_chroot_local-packages || return 1

  mk_buildid

  echo I: building binary
  if ! lh_binary; then
    echo E: binary build failed
    exit 1
  fi

  exit 0
fi

# clear .stage
# note: this causes all steps to be re-executed. however, the bootstrap stage
# is cached, so the bootstrap step only restores the cached stage.
rm -rf .stage

echo I: buidling bootstrap
if ! lh_bootstrap; then
  echo E: bootstrap build failed
  exit 1
fi

if ! test -f chroot/etc/network/interfaces || \
   ! grep -q '^auto lo' chroot/etc/network/interfaces ; then
    echo I: Configure network loopback interface
    mkdir -p -m 0755 chroot/etc/network
    cat >> chroot/etc/network/interfaces <<-EOF
	# interfaces(5) file used by ifup(8) and ifdown(8)

	# The loopback network interface
	auto lo
	iface lo inet loopback

	EOF
fi

if [ -d cache/lists ] ; then
    echo I: Restore cached package lists
    cp -a cache/lists chroot/var/lib/apt/
fi

cp chroot_local-hooks/*[^~] config/chroot_local-hooks/

if eval "$use_xen" ; then
    echo I: Disabling TLS
    mv chroot/lib/tls chroot/lib/tls.disabled
else
    rm -f config/chroot_local-hooks/*xen*
fi

echo I: Adding live-bottom/*[^~]
mkdir -p -m 0755 chroot/usr/share/initramfs-tools/scripts/live-bottom/
cp live-bottom/*[^~] chroot/usr/share/initramfs-tools/scripts/live-bottom/

# do the steps in lh_chroot
build_chroot ()
{
  echo I: configuring chroot
  lh_chroot_cache restore || return 1
  lh_chroot_proc install || return 1
  lh_chroot_sysfs install || return 1
  lh_chroot_debianchroot install --force || return 1
  lh_chroot_dpkg install || return 1
  lh_chroot_sysv-rc install || return 1
  lh_chroot_hosts install || return 1
  lh_chroot_resolv install || return 1
  lh_chroot_hostname install || return 1
  lh_chroot_apt install || return 1
  echo 'quiet "1";' > chroot/etc/apt/apt.conf.d/03quiet
  lh_chroot_sources install || return 1

  lh_chroot_linux-image install || return 1
  
  test -r live.conf/${LH_DISTRIBUTION} && \
      cp live.conf/${LH_DISTRIBUTION} chroot/etc/live.conf

  echo I: customizing live-initramfs
  ( shopt -s nullglob; cd chroot/ && \
    for patch in ../patches/${LH_DISTRIBUTION}-*.patch ; do \
        patch -p1 < $patch ; \
    done )
  
  echo I: customizing chroot
  lh_chroot_preseed || return 1
  lh_chroot_local-preseed || return 1
  lh_chroot_tasks || return 1
  lh_chroot_packageslists || return 1
  lh_chroot_packages || return 1
 
  if [ -n "${VYATTA_LINUX_PKG}" ] ; then
      KPKG=`shopt -s nullglob; cd config/chroot_local-packages; \
          echo ${VYATTA_LINUX_PKG}*`
      if [ -n "$KPKG" ] ;  then
          # Kernel is built locally. Install it first.
	  mv config/chroot_local-packages/"$KPKG" chroot/.
	  chroot chroot dpkg -i "$KPKG"
	  rm chroot/"$KPKG"
      elif ! grep -q "${VYATTA_LINUX_PKG}" ${pkglistdir}/vyatta-pkgs ; then
	  echo "${VYATTA_LINUX_PKG}" >> ${pkglistdir}/vyatta-pkgs
      fi
  fi

  # we do local packages first since they are "newer".
  set_up_apt_pref
  lh_chroot_local-packages || return 1
  lh_chroot_local-packageslists || return 1

  lh_chroot_localization || return 1
  lh_chroot_local-includes || return 1
  lh_chroot_sysvinit || return 1
  lh_chroot_hooks || return 1
  lh_chroot_local-hooks || return 1
  lh_chroot_symlinks || return 1
  lh_chroot_hacks || return 1
  lh_chroot_interactive || return 1

  # remove resolv.conf.orig so it doesn't get restored
  rm -f chroot/etc/resolv.conf.orig

  echo I: deconfiguring chroot
  lh_chroot_linux-image remove || return 1
  lh_chroot_sources remove || return 1
  lh_chroot_apt remove || return 1
  lh_chroot_hostname remove || return 1
  lh_chroot_resolv remove || return 1
  lh_chroot_hosts remove || return 1
  lh_chroot_sysv-rc remove || return 1
  lh_chroot_dpkg remove || return 1
  lh_chroot_debianchroot remove || return 1
  lh_chroot_sysfs remove || return 1
  lh_chroot_proc remove || return 1
  lh_chroot_cache save || return 1

  chroot chroot depmod -a `cd chroot/lib/modules;echo *`
# FIXME! we no longer appear to need this update
#	so, comment out for now
#  echo I: Update initramfs
#  chroot chroot update-initramfs -t -u -k all
}

echo I: building chroot
if ! build_chroot; then
  echo E: chroot build failed
  exit 1
fi

mk_buildid

# remove backup files for ISO
rm -f chroot/etc/*.vyatta-save chroot/etc/*/*.vyatta-save

echo I: restoring ldd/ldconfig
if [ -f chroot/usr/bin/ldd.REAL ]; then
  rm -f chroot/usr/bin/ldd
  mv chroot/usr/bin/ldd.REAL chroot/usr/bin/ldd 
fi
if [ -f chroot/sbin/ldconfig.REAL ]; then
  rm -f chroot/sbin/ldconfig
  mv chroot/sbin/ldconfig.REAL chroot/sbin/ldconfig
fi

echo I: Cache Package files
cp -a chroot/var/lib/apt/lists cache/

declare -x MKSQUASHFS_OPTIONS="-no-progress -ef tmp/mksquashfs.exclude"
>chroot/tmp/mksquashfs.exclude
for b in chroot/var/lib/apt/lists/*_dists_* ; do
    echo ${b#chroot/}	>> chroot/tmp/mksquashfs.exclude
done
for b in chroot/boot/initrd.img-* ; do
    echo ${b#chroot/}	>> chroot/tmp/mksquashfs.exclude
done

set_up_apt_pref
# exclude more files
cat <<EOF >> chroot/tmp/mksquashfs.exclude
etc/apt/preferences
etc/resolv.conf
var/log/bootstrap.log
var/log/dpkg.log
EOF

add_debian_installer ()
{
  [ -f deb-install.tar ] \
    || wget -nv http://archive.vyatta.com/build-root/deb-install.tar

  if [ ! -d deb-install ]
  then
    tar xf deb-install.tar
  fi
  rsync -avz deb-install/ binary >/dev/null
  rsync -avz d-i/ binary >/dev/null

  cp -a ./cache/packages* binary/pool/main/
  rm -f binary/pool/main/lock

  (
    mkdir -p binary/pool/main/v/vyatta/.
    cp ../*/*.deb binary/pool/main/v/vyatta/.
    cd binary/pool/main/v/vyatta
    rm -f *source*.deb
    mkdir sav$$
    mv linux-* sav$$/. 2>/dev/null
    mv sav$$/linux-image* . 2>/dev/null
    rm -rf sav$$
  )

  chroot chroot dpkg -l | awk '/^ii/ {print $2}' >binary/.Released

  #cat >>deb-install/.Released <<'EOF'
  #debconf-english
  #bootable-system
  #created-fstab
  #mounted-partitions
  #libdebconfclient0
  #rootskel
  #EOF

  (
    cd binary

    $toolsdir/create-version-package -v 1 -d . -r lenny -x -o /dev/null
    for i in `cat .Released`; do $toolsdir/latestdeb $i; done>/tmp/$$list

    rsync -avz --exclude="*.deb" pool pool.udeb >/dev/null
    find pool -name '*.udeb' -exec rm -f {} \;
    rm -rf pool/main/l/linux*2.6 2>/dev/null

    (
      cd pool
      $toolsdir/archive-report -f>/tmp/report$$
      rm_files=`find -name '*.deb'|sort|comm -3 - /tmp/report$$`
      rm -f $rm_files /tmp/report$$
    )

    [ -f vyatta-pubkey.gpg ] \
      || wget http://archive.vyatta.com/vyatta/vyatta-pubkey.gpg

    $toolsdir/deb-archive -r lenny -n main -d .
    (
      cd pool.udeb/pool
      cp -a * ../../pool/.
    )

    rm -rf pool.udeb .disk/ID*
    touch .disk/ID$BUILDID
    #genisoimage -quiet -J -o ../deb-install.iso -r -b isolinux/isolinux.bin \
    #  -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table .
  )
}

# do lh_binary
build_binary ()
{
  lh_binary_chroot || return 1
  
  lh_chroot_devpts install || return 1
  lh_chroot_proc install || return 1
  lh_chroot_sysfs install || return 1
  lh_chroot_hosts install || return 1
  lh_chroot_resolv install || return 1
  lh_chroot_hostname install || return 1
  lh_chroot_sources install || return 1

  lh_binary_rootfs || return 1
  lh_binary_manifest || return 1
  lh_binary_encryption || return 1

  lh_binary_local-packageslists || return 1
  lh_binary_linux-image || return 1
  lh_binary_debian-installer || return 1
  lh_binary_memtest || return 1
  lh_binary_grub || return 1
  lh_binary_syslinux || return 1
  lh_binary_yaboot || return 1
  lh_binary_disk || return 1
  lh_binary_includes || return 1
  lh_binary_local-includes || return 1
  lh_binary_local-hooks || return 1
 
  # build live-only cd
  lh_binary_md5sum || return 1
  lh_binary_iso || return 1
  mv -f binary.iso cache/

  if [ "$BUILD_DEB_INSTALL" == "yes" ]; then
    # build live/deb-install combo cd
    rm -f .stage/binary_{md5sum,iso}
    add_debian_installer || return 1
    lh_binary_md5sum || return 1
    lh_binary_iso || return 1
    mv -f binary.iso deb-install.iso
  fi
  
  mv -f cache/binary.iso .

  lh_binary_net || return 1
  lh_binary_tar || return 1
  lh_binary_usb-hdd || return 1

  rm -f .stage/chroot_sources
  lh_chroot_hostname remove || return 1
  lh_chroot_resolv remove || return 1
  lh_chroot_hosts remove || return 1

  lh_chroot_sysfs remove || return 1
  lh_chroot_proc remove || return 1
  lh_chroot_devpts remove || return 1
}

echo I: building binary
if ! build_binary; then
  echo E: binary build failed
  exit 1
fi

echo I: Done

# Local Variables:
# mode: shell-script
# sh-indentation: 4
# End:
