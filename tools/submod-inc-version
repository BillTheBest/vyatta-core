#!/bin/bash

progname=${0##*/}
shopt -s nullglob
cd pkgs

info=echo
trace=
noclean="-nc"
build="debuild -i -b -uc -us"

# check to see if the version #'s will be incremented nicely
found=`grep 'DEBCHANGE_AUTO_NMU.*=.*no' $HOME/.devscripts /etc/devscripts.conf 2>/dev/null`
if [ ! "$found" ]
then
	echo "Please set DEBCHANGE_AUTO_NMU=no in ~/.devscripts or /etc/devscripts.conf"
	exit 1
fi

declare -a cloned=( */debian )
declare -a submodule=( ${cloned[@]%/*} )

while [ $# -gt 0 ] ; do
    case "$1" in
	-h | --help )
	    cat <<-EOF
Usage: $progname [Options] [ SUBMODULE... ]
Options:
  -n | --do-nothing	DonÂ´t actually remove or build anything,
  			just show what would be done
  -q | --quiet		Quiet, don't print progress info
  -c | --clean		Clean build
  -b | --binary		Skip source package build (default)
  -s | --source		Build binary and source packages
  -S | --signed-source	Build and sign packages

If no SUBMODULE(s) given, build all checked-out submodules w/o debs.
EOF
	    exit 0;;
	-n | --do-nothing )
	    trace=echo
	    shift;;
	-q | --quiet )
	    info='#'
	    shift;;
	-c | --clean )
	    noclean=
	    shift;;
	-b | --binary )
	    shift ;;		# default
	-s | --source )
	    build="git-buildpackage -uc -us"
	    shift;;
	-S | --signed-source )
	    build="git-buildpackage"
	    shift;;
	-i )
	    INCVNUM=yes
	    RELEASENAME="Start of development"
	    shift;;
	-m )
	    shift
	    RELEASENAME="$1"
	    [ "$RELEASENAME" ] || RELEASENAME=UNRELEASED
	    shift;;
	* )
	    submodule=( $@ )
	    break;;
    esac
done

follow_link()
{(
	link="$1"
	while true
	do
		dir=`dirname "$link"`
		link=`basename "$link"`
		cd "$dir"

		[ ! -L "$link" ] && break
		link=`readlink "$link"`
	done

	echo "$PWD"/"$link"
)}

get_tag()
{
	head -1 debian/changelog|sed 's/.*(\([^)]*\)).*/\1/'
}

get_branch()
{
	git-branch|grep '^\* '|sed 's/^\* //'
}

mod_changelog()
{(

	[ "$RELEASENAME" = UNRELEASED ] || rel=--release

	branch=`get_branch`
	[ ! -f debian/control ] && echo "Maintainer: eng@vyatta.com">debian/control
	if ! EDITOR=true git-dch $rel --debian-branch "$branch"
	then
		true		# actually cannot use this yet because the git-dch changelog parser has bugs
		# return 0	# ignore because branch does not exist
	fi

	cp debian/changelog /tmp/changelog$$
	[ "$RELEASENAME" = UNRELEASED ] && return 0

	sed -e 's/^  \* UNRELEASED$//' -e '3i \
	  '"$RELEASENAME" /tmp/changelog$$ >debian/changelog
	rm /tmp/changelog$$
	return 0
)}

do_inc_version()
{
	local repo
	eval $info P: "$1"
	repo="$1"
(
	cd "$repo" || return

	branch=`get_branch`

	if [ "$INCVNUM" ]
	then
		echo "$RELEASENAME for $branch">STATUS
		git-add STATUS
		git-commit -m `cat STATUS`
	fi

	tag_sha=`get_tag`
	tag_sha=`git-cat-file -p debian/"$tag_sha"|head -1|sed 's,.* ,,'`
	head_sha=`cat .git/refs/heads/"$branch"`
	diffs=`[ "$tag_sha" -a "$tag_sha" != "$head_sha" ] && git-diff "$tag_sha" "$head_sha"|head -1`
	if [ ! "$diffs" ]
	then
		git-tag -a -m "$RELEASENAME" vyatta/"$RELEASENAME" 2>/dev/null
		return
	fi

	case "$repo" in
	linux-image* )
		$trace mod_changelog "$RELEASENAME"
		#debuild -i -b -us -uc >/dev/null 2>/dev/null # we need to check-in some derived files for the build to work
		;;
	* )
		$trace mod_changelog "$RELEASENAME"
		;;
	esac

	if [ "$RELEASENAME" = UNRELEASED ]
	then
		#git-commit -a -m "Setting changelog to UNRELEASED" >/dev/null
		true
	else
		git-commit -a -m "$RELEASENAME" >/dev/null
		git-tag -a -m "$RELEASENAME" debian/`get_tag` 2>/dev/null
		git-tag -a -m "$RELEASENAME" vyatta/"$RELEASENAME" 2>/dev/null
	fi
)
}

for (( i=0; i<${#submodule[@]}; i++))
do
	do_inc_version "${submodule[i]}"
done

echo "$RELEASENAME">../livecd/version
do_inc_version ..
